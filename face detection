####face dataset


import numpy as np
import cv2

detector= cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)

id=raw_input('enter user id')
sampleNum=0
while(True):
    ret, img = cap.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = detector.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        sampleNum=sampleNum+1
        cv2.imwrite("dataSet/User."+str(id)+"."+str(sampleNum)+".jpg",gray[y:y+h,x:x+w])
        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        cv2.waitKey(100);
    cv2.imshow('frame',img);
    cv2.waitKey(1);
    if(sampleNum>40):
        break
cap.release()
cv2.destroyAllWindows()


####trainer



import os
import cv2
import numpy as np
from PIL import Image

recognizer = cv2.face.LBPHFaceRecognizer_create() 
path='dataSet'

def getImagesAndLabels(path):
    imagePaths=[os.path.join(path,f) for f in os.listdir(path)] 
    faces=[]
    Ids=[]
    for imagePath in imagePaths:

       
        pilImage=Image.open(imagePath).convert('L')
        
        imageNp=np.array(pilImage,'uint8')
       
        Id=int(os.path.split(imagePath)[-1].split(".")[1])
      
        faces.append(imageNp)
        print Id
        Ids.append(Id)
        cv2.imshow("training",imageNp)
        cv2.waitKey(10)
    return faces,Ids


faces,Ids = getImagesAndLabels('dataSet')
recognizer.train(faces, np.array(Ids))
recognizer.save('trainner.csv')
recognizer.write('trainner.csv')

cv2.destroyAllWindows()


####DEtector


import numpy as np
import cv2

detector= cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)
rec= cv2.face.LBPHFaceRecognizer_create();
##rec.read("C:\Users\sreekar\Desktop\trainner\trainner.yml")
rec.read('trainner.csv')
id=0
c=[1,2,3,4]


while(True):
    ret, img = cap.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = detector.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        id,conf=rec.predict(gray[y:y+h,x:x+w])
        cv2.putText(img,str(id),(x,y+h),cv2.FONT_HERSHEY_SIMPLEX,2,255)
        if(id in c):
            print("doors opned")
        else:
            print("door is closed")

        ##if(id==True):
            ##cv2.putText(img,str(id),(x,y+h),cv2.FONT_HERSHEY_SIMPLEX,2,255)
        ##else:
            ##cv2.putText(img,'not recognised',(x,y+h),cv2.FONT_HERSHEY_SIMPLEX,2,255)
            

    cv2.imshow('frame',img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
    
cap.release()
cv2.destroyAllWindows()
